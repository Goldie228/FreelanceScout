import logging
import sys
import asyncio
import os
from os import getenv
from dotenv import load_dotenv
import signal

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery

from src import REDIS_CLIENT, REDIS_CLIENT_ASYNCIO
from src import ApplicationParser
from src import NotificationService
from src import Database

load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMIN_USERNAME = getenv("ADMIN_USERNAME")

dp = Dispatcher()
db = Database()
redis_client = REDIS_CLIENT
redis_client_asyncio = REDIS_CLIENT_ASYNCIO

application_parser = ApplicationParser(redis_client)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    chat_id = str(message.from_user.id)
    user = db.get_user(chat_id)
    
    if user is None:
        default_keywords = ""
        db.add_user(
            chat_id,
            keywords=default_keywords,
            mailing_kwork=True,
            mailing_fl=True,
            mailing_freelancer=True
        )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {html.bold(message.from_user.full_name)}!\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.\n\n"
        "üìå –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ Kwork.ru, FL.ru –∏ Freelancer.com\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ –ü–æ–∑–≤–æ–ª—è—Ç—å –≥–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "‚ö° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å\n\n"
        "‚ùì –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help",
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    is_admin = message.from_user.username and message.from_user.username.lower() == ADMIN_USERNAME.lower()
    
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        "üëã <b>/start</b> - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "‚öôÔ∏è <b>/settings</b> - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "üîç <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞:\n"
        "   ‚Ä¢ Kwork.ru\n"
        "   ‚Ä¢ FL.ru\n"
        "   ‚Ä¢ Freelancer.com\n"
        "2. –§–∏–ª—å—Ç—Ä—É—é –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "3. –ü—Ä–∏—Å—ã–ª–∞—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö\n\n"
        "‚ö° <b>–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
        "‚Ä¢ –û—Ç–∫–ª—é—á–∞–π—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã\n\n"
    )
    
    if is_admin:
        help_text += (
            "üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "‚Ä¢ <b>/force_update</b> - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            "‚Ä¢ <b>/shutdown</b> - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞\n\n"
        )
    
    help_text += "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Goldie228."
    
    await message.answer(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_text_command(message: Message):
    await cmd_settings(message)

@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_text_command(message: Message):
    await help_command(message)

async def shutdown(loop, bot):
    logging.info("–ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")

    try:
        await bot.close()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

    try:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤...")
        await asyncio.get_event_loop().run_in_executor(None, application_parser.kill_processes)
        logging.info("–ü—Ä–æ—Ü–µ—Å—Å—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")

    try:
        db.disconnect()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

    loop.stop()
    logging.info("Event loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message(Command("shutdown"))
async def shutdown_command(message: Message):
    if message.from_user.username == ADMIN_USERNAME:
        await message.answer("üõë –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
        logging.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –æ—Ç {message.from_user.username}")
        await shutdown(asyncio.get_event_loop(), bot)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}")

class SettingsState(StatesGroup):
    SETTING_KEYWORDS = State()

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

async def cmd_settings(message: Message, update: bool = False):
    chat_id = str(message.chat.id)
    user = db.get_user(chat_id)
    
    if not user:
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=f"üîî Kwork: {'–í–∫–ª' if user[3] else '–í—ã–∫–ª'}",
            callback_data=f"toggle_kwork:{'off' if user[3] else 'on'}"
        ),
        InlineKeyboardButton(
            text=f"üîî FL: {'–í–∫–ª' if user[4] else '–í—ã–∫–ª'}",
            callback_data=f"toggle_fl:{'off' if user[4] else 'on'}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=f"üîî Freelancer: {'–í–∫–ª' if user[5] else '–í—ã–∫–ª'}",
            callback_data=f"toggle_freelancer:{'off' if user[5] else 'on'}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
            callback_data="set_keywords"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="close_settings"
        )
    )
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "1. –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"
    )
    
    markup = builder.as_markup()
    
    if update:
        try:
            await message.edit_text(settings_text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(settings_text, reply_markup=markup, parse_mode="HTML")
    else:
        await message.answer(settings_text, reply_markup=markup, parse_mode="HTML")


@dp.message(Command("settings"))
async def settings_command_handler(message: Message):
    await cmd_settings(message, update=False)


@dp.callback_query(lambda c: c.data.startswith("toggle_"))
async def toggle_service(callback: CallbackQuery):
    service, action = callback.data.split(":")
    service = service.replace("toggle_", "")
    chat_id = str(callback.from_user.id)

    if service == "kwork":
        db.update_user(chat_id, mailing_kwork=(action == "on"))
    elif service == "fl":
        db.update_user(chat_id, mailing_fl=(action == "on"))
    elif service == "freelancer":
        db.update_user(chat_id, mailing_freelancer=(action == "on"))

    await cmd_settings(callback.message, update=True)
    await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {service} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@dp.callback_query(lambda c: c.data == "set_keywords")
async def set_keywords_start(callback: CallbackQuery, state: FSMContext):
    chat_id = str(callback.message.chat.id)
    user = db.get_user(chat_id)
    current_keywords = user[2] if user and user[2] else "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
    
    await state.set_state(SettingsState.SETTING_KEYWORDS)
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <code>{current_keywords}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>python, django, –ø–∞—Ä—Å–∏–Ω–≥</i>\n\n"
            "‚ùï –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        await callback.message.answer(
            f"‚úèÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <code>{current_keywords}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>python, django, –ø–∞—Ä—Å–∏–Ω–≥</i>\n\n"
            "‚ùï –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode=ParseMode.HTML
        )
    await callback.answer()

@dp.message(Command("cancel"), SettingsState.SETTING_KEYWORDS)
async def cancel_keywords(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("force_update"))
async def force_update_command(message: Message):
    if message.from_user.username and message.from_user.username.lower() == ADMIN_USERNAME.lower():
        redis_client.publish('data_updates', 'true')
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    else:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@dp.message(SettingsState.SETTING_KEYWORDS)
async def save_keywords(message: Message, state: FSMContext):
    chat_id = str(message.chat.id)
    raw_keywords = message.text.strip()

    keywords_list = [kw.strip() for kw in raw_keywords.split(",") if kw.strip()]
    if not keywords_list:
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    validated_keywords = ", ".join(keywords_list)
    
    try:
        db.update_user(chat_id, keywords=validated_keywords)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ë–î: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await cmd_settings(message, update=False)

    await message.answer(
        f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n<code>{validated_keywords}</code>", 
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(lambda c: c.data == "close_settings")
async def close_settings(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    await callback.message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

def handle_signal(signame):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signame}")
    asyncio.create_task(shutdown(asyncio.get_event_loop(), bot))

async def main() -> None:
    global bot
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    db.connect()

    notification_service = NotificationService(redis_client_asyncio, db, dp, bot)
    asyncio.create_task(notification_service.listen())

    loop = asyncio.get_running_loop()
    for signame in ('SIGINT', 'SIGTERM'):
        loop.add_signal_handler(
            getattr(signal, signame),
            lambda: handle_signal(signame)
        )

    try:
        parser_task = asyncio.create_task(
            asyncio.to_thread(application_parser.run_parsers)
        )

        async with bot:
            await dp.start_polling(bot)
            
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        db.disconnect()
        listen_task.cancel()

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        stream=sys.stdout
    )
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
